import requests
import re
import json
import socket
import whois
from datetime import datetime
import tldextract
import validators
import tkinter as tk
from tkinter import messagebox
import http.client

# API Keys
GOOGLE_API_KEY = "AIzaSyBoexKhwjgFBqA7hFGoD7hwc9gYmuCaex4"
VT_API_KEY = "58914edf2c51b13146f794c79b8b5783c9fe02ccf17085137107d6ce26b6d540"
IOC_API_KEY = "14fd94f931msh7a594545965681cp1f1d88jsna0d931bf194c"

# Define suspicious URL patterns
SUSPICIOUS_PATTERNS = [
    r"[\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}",  # IP address in URL
    r"[-]{2,}",  # Multiple hyphens in URL (e.g., --example.com)
    r"www\.[a-zA-Z0-9]{0,}[\.][a-zA-Z]{2,4}\.(ru|cn|info|top|cc)"  # Suspicious domains
]

SUSPICIOUS_TLDS = ['.xyz', '.top', '.club', '.icu']
URL_SHORTENERS = ['bit.ly', 'goo.gl', 't.co']
SUSPICIOUS_SUBDOMAINS = ['login', 'secure', 'account', 'pay']

# Check Google Safe Browsing
def check_google_safebrowsing(url):
    endpoint = "https://safebrowsing.googleapis.com/v4/threatMatches:find"
    headers = {'Content-Type': 'application/json'}
    body = {
        "client": {"clientId": "your_project_id", "clientVersion": "1.0"},
        "threatInfo": {
            "threatTypes": ["MALWARE", "SOCIAL_ENGINEERING", "UNWANTED_SOFTWARE", "THREAT_TYPE_UNSPECIFIED"],
            "platformTypes": ["ANY_PLATFORM"],
            "threatEntryTypes": ["URL"],
            "threatEntries": [{"url": url}]
        }
    }
    response = requests.post(endpoint, json=body, headers=headers, params={'key': GOOGLE_API_KEY})
    if response.status_code == 200:
        response_data = response.json()
        if response_data.get('matches'):
            return "‚ö†Ô∏è [Google Safe Browsing] URL is flagged as unsafe!"
        else:
            return "‚úÖ [Google Safe Browsing] URL is safe."
    else:
        return f"‚ùå Google API Error: {response.status_code} - {response.text}"

# Check VirusTotal
def check_virustotal(url):
    endpoint = "https://www.virustotal.com/api/v3/urls"
    headers = {"x-apikey": VT_API_KEY}
    data = {"url": url}
    response = requests.post(endpoint, headers=headers, data=data)
    if response.status_code == 200:
        result = response.json()
        scan_id = result["data"]["id"]
        report_endpoint = f"https://www.virustotal.com/api/v3/analyses/{scan_id}"
        report_response = requests.get(report_endpoint, headers=headers)
        if report_response.status_code == 200:
            report_data = report_response.json()
            stats = report_data["data"]["attributes"]["stats"]
            malicious_count = stats.get("malicious", 0)
            suspicious_count = stats.get("suspicious", 0)
            if malicious_count > 0 or suspicious_count > 0:
                return f"‚ö†Ô∏è [VirusTotal] URL flagged as malicious by {malicious_count} engines!"
            else:
                return "‚úÖ [VirusTotal] URL is safe."
        else:
            return f"‚ùå VirusTotal Report Error: {report_response.status_code} - {report_response.text}"
    else:
        return f"‚ùå VirusTotal API Error: {response.status_code} - {response.text}"

def extract_ip(url):
    match = re.search(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', url)
    return match.group(0) if match else None

#Check IOC
def check_ioc_search(url):
    domain = re.sub(r"https?://(www\.)?", "", url).split('/')[0]

    try:
        ip_address = socket.gethostbyname(domain)
    except socket.gaierror:
        ip_address = None  

    headers = {
        "x-rapidapi-key": IOC_API_KEY,  
        "x-rapidapi-host": "ioc-search.p.rapidapi.com"
    }

    # **Check domain in IOC**
    domain_endpoint = f"/rapid/v1/ioc/search/domain?query={domain}"
    domain_conn = http.client.HTTPSConnection("ioc-search.p.rapidapi.com")
    domain_conn.request("GET", domain_endpoint, headers=headers)
    domain_response = domain_conn.getresponse()
    domain_data = domain_response.read().decode("utf-8")

    try:
        domain_result_json = json.loads(domain_data)
        security_vendor_analysis = domain_result_json.get("data", {}).get("security_vendor_analysis", {})

        # üõë **Debugging Step**
        print("IOC API Response:", domain_data)  

        # **Check PhishTank**
        if "Phishtank" in security_vendor_analysis and security_vendor_analysis["Phishtank"].get("category") == "malicious":
            ioc_result = f"‚ö†Ô∏è [IOC Search] Domain {domain} flagged as PHISHING by PhishTank!"
        else:
            ioc_result = f"‚úÖ [IOC Search] Domain {domain} is clean."

    except json.JSONDecodeError:
        ioc_result = f"‚ùå IOC API Error: Invalid JSON response - {domain_data}"

    # **Check IP in IOC**
    if ip_address:
        ip_endpoint = f"/rapid/v1/ioc/search/ip?query={ip_address}"
        ip_conn = http.client.HTTPSConnection("ioc-search.p.rapidapi.com")
        ip_conn.request("GET", ip_endpoint, headers=headers)
        ip_response = ip_conn.getresponse()
        ip_data = ip_response.read().decode("utf-8")

        if ip_response.status == 200:
            if "results" in ip_data:
                ip_result = f"‚ö†Ô∏è [IOC Search] IP {ip_address} is flagged!"
            else:
                if "Phishtank" in security_vendor_analysis and security_vendor_analysis["Phishtank"].get("category") == "malicious":
                    ip_result = f"‚ö†Ô∏è [IOC Search] IP {ip_address} might be linked to phishing (same as flagged domain)!"
                else:
                    ip_result = f"‚úÖ [IOC Search] IP {ip_address} is clean."
        else:
            ip_result = f"‚ùå IOC API Error (IP): {ip_response.status} - {ip_data}"
    else:
        ip_result = "‚ö†Ô∏è [IOC Search] No IP found in URL, skipping IOC check."

    # **Return both results**
    return f"{ioc_result}\n{ip_result}"

# Get Domain Age
def get_domain_age(domain):
    try:
        domain_info = whois.whois(domain)
        creation_date = domain_info.creation_date
        if isinstance(creation_date, list):
            creation_date = creation_date[0]
        if creation_date:
            age = (datetime.now() - creation_date).days
            return f"üìÖ [Domain Age] {domain} is {age} days old."
        else:
            return "‚ö†Ô∏è [Domain Age] Could not retrieve domain creation date."
    except Exception as e:
        return f"‚ùå [Domain Age] Error retrieving domain info: {e}"

# Get IP Address of Domain
def get_domain_ip(domain):
    try:
        ip_address = socket.gethostbyname(domain)
        return f"üåê [Domain IP] {domain} resolves to {ip_address}."
    except socket.gaierror:
        return "‚ö†Ô∏è [Domain IP] Could not resolve domain to an IP address."

def analyze_url(event=None):
    url = url_entry.get()
    domain = re.sub(r"https?://(www\.)?", "", url).split('/')[0]
    
    # Fetch domain details
    domain_age_result = get_domain_age(domain)
    domain_ip_result = get_domain_ip(domain)  # Get IP address of domain
    google_result = check_google_safebrowsing(url)
    vt_result = check_virustotal(url)
    ioc_result = check_ioc_search(url)
    
    # Display results
    result_text.delete(1.0, tk.END)
    result_text.insert(tk.END, f"{google_result}\n{vt_result}\n{ioc_result}\n{domain_age_result}\n{domain_ip_result}\n")
    
    # Highlight warnings in red
    if "‚ö†Ô∏è" in google_result or "‚ö†Ô∏è" in vt_result or "‚ö†Ô∏è" in ioc_result:
        result_text.config(fg="red")
    else:
        result_text.config(fg="green")

# Create main window
root = tk.Tk()
root.title("URL Analysis Tool")
root.geometry("800x500")  # Bigger window size

# Enable Fullscreen Mode
def toggle_fullscreen(event=None):
    root.attributes('-fullscreen', not root.attributes('-fullscreen'))

# Exit Fullscreen with Esc
def exit_fullscreen(event=None):
    root.attributes('-fullscreen', False)

root.bind("<F11>", toggle_fullscreen)  # Toggle fullscreen with F11
root.bind("<Escape>", exit_fullscreen)  # Exit fullscreen with Esc

# URL Entry
url_label = tk.Label(root, text="Enter URL to analyze:", font=("Helvetica", 14))
url_label.pack(pady=10)
url_entry = tk.Entry(root, width=60, font=("Helvetica", 14))  # Wider input field
url_entry.pack(pady=10)
url_entry.bind("<Return>", analyze_url)

# Result display (Larger text box)
result_text = tk.Text(root, width=90, height=15, font=("Helvetica", 12))  # Bigger output window
result_text.pack(pady=20)

# Run the application
root.mainloop()
