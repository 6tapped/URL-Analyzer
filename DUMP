import requests
import re
import json
import socket
import whois
from datetime import datetime
import tkinter as tk
import http.client

# API Keys
IOC_API_KEY = "14fd94f931msh7a594545965681cp1f1d88jsna0d931bf194c"

# Check IOC
def check_ioc_search(url):
    domain = re.sub(r"https?://(www\.)?", "", url).split('/')[0]

    try:
        ip_address = socket.gethostbyname(domain)
    except socket.gaierror:
        ip_address = None

    headers = {
        "x-rapidapi-key": IOC_API_KEY,
        "x-rapidapi-host": "ioc-search.p.rapidapi.com"
    }

    # Check domain in IOC
    domain_endpoint = f"/rapid/v1/ioc/search/domain?query={domain}"
    domain_conn = http.client.HTTPSConnection("ioc-search.p.rapidapi.com")
    domain_conn.request("GET", domain_endpoint, headers=headers)
    domain_response = domain_conn.getresponse()
    domain_data = domain_response.read().decode("utf-8")

    try:
        domain_result_json = json.loads(domain_data)
        security_vendor_analysis = domain_result_json.get("data", {}).get("security_vendor_analysis", {})

        malicious_count = 0
        suspicious_count = 0
        threat_count = 0

        if security_vendor_analysis:
            for vendor, analysis in security_vendor_analysis.items():
                category = analysis.get('category', '').lower()
                if 'malicious' in category:
                    malicious_count += 1
                elif 'suspicious' in category:
                    suspicious_count += 1
                elif 'threat' in category:
                    threat_count +=1

        summary = f"Reports: {malicious_count} malicious, {suspicious_count} suspicious, {threat_count} threat."
        is_ioc_malicious = malicious_count > 0 or suspicious_count > 0 or threat_count > 0

        # Check PhishTank
        if "Phishtank" in security_vendor_analysis and security_vendor_analysis["Phishtank"].get("category") == "malicious":
            ioc_result = f"‚ö†Ô∏è [IOC Search] Domain {domain} flagged as PHISHING by PhishTank! ({summary})", True
        else:
            ioc_result = f"‚úÖ [IOC Search] Domain {domain} is clean. ({summary})", is_ioc_malicious

    except json.JSONDecodeError:
        ioc_result = f"‚ùå IOC API Error: Invalid JSON response - {domain_data}", False

    # Check IP in IOC
    if ip_address:
        ip_endpoint = f"/rapid/v1/ioc/search/ip?query={ip_address}"
        ip_conn = http.client.HTTPSConnection("ioc-search.p.rapidapi.com")
        ip_conn.request("GET", ip_endpoint, headers=headers)
        ip_response = ip_conn.getresponse()
        ip_data = ip_response.read().decode("utf-8")

        try:
            ip_result_json = json.loads(ip_data)
            ip_results = ip_result_json.get("results", [])

            ip_flagged = len(ip_results) > 0
            ip_result = f"‚ö†Ô∏è [IOC Search] IP {ip_address} is flagged!" if ip_flagged else f"‚úÖ [IOC Search] IP {ip_address} is clean." , ip_flagged

        except json.JSONDecodeError:
            ip_result = f"‚ùå IOC API Error (IP): {ip_response.status} - {ip_data}", False
    else:
        ip_result = "‚ö†Ô∏è [IOC Search] No IP found in URL, skipping IOC check.", False

    # Return both results
    return f"{ioc_result[0]}\n{ip_result[0]}", ioc_result[1] or ip_result[1]

# Get Domain Age
def get_domain_age(domain):
    try:
        domain_info = whois.whois(domain)
        creation_date = domain_info.creation_date
        if isinstance(creation_date, list):
            creation_date = creation_date[0]
        if creation_date:
            age = (datetime.now() - creation_date).days
            return f"üìÖ [Domain Age] {domain} is {age} days old."
        else:
            return "‚ö†Ô∏è [Domain Age] Could not retrieve domain creation date."
    except Exception as e:
        return f"‚ùå [Domain Age] Error retrieving domain info: {e}"

# Get IP Address of Domain
def get_domain_ip(domain):
    try:
        ip_address = socket.gethostbyname(domain)
        return f"üåê [Domain IP] {domain} resolves to {ip_address}."
    except socket.gaierror:
        return "‚ö†Ô∏è [Domain IP] Could not resolve domain to an IP address."

def analyze_url(event=None):
    url = url_entry.get()
    domain = re.sub(r"https?://(www\.)?", "", url).split('/')[0]

    # Fetch domain details
    domain_age_result = get_domain_age(domain)
    domain_ip_result = get_domain_ip(domain)  # Get IP address of domain
    ioc_result, ioc_malicious = check_ioc_search(url)

    # Display results
    result_text.delete(1.0, tk.END)
    result_text.insert(tk.END, f"{ioc_result}\n{domain_age_result}\n{domain_ip_result}\n")

    # Highlight warnings in red
    if ioc_malicious:
        result_text.config(fg="red")
    else:
        result_text.config(fg="green")

# Create main window
root = tk.Tk()
root.title("URL Analysis Tool (IOC Search Only)")
root.geometry("800x500")  # Bigger window size

# Enable Fullscreen Mode
def toggle_fullscreen(event=None):
    root.attributes('-fullscreen', not root.attributes('-fullscreen'))

# Exit Fullscreen with Esc
def exit_fullscreen(event=None):
    root.attributes('-fullscreen', False)

root.bind("<F11>", toggle_fullscreen)  # Toggle fullscreen with F11
root.bind("<Escape>", exit_fullscreen)  # Exit fullscreen with Esc

# URL Entry
url_label = tk.Label(root, text="Enter URL to analyze:", font=("Helvetica", 14))
url_label.pack(pady=10)
url_entry = tk.Entry(root, width=60, font=("Helvetica", 14))  # Wider input field
url_entry.pack(pady=10)
url_entry.bind("<Return>", analyze_url)

# Result display (Larger text box)
result_text = tk.Text(root, width=90, height=20, font=("Helvetica", 12))  # Bigger output window
result_text.pack(pady=20)

# Run the application
root.mainloop()
